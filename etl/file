#!/usr/bin/env python3
import io
import json
import os
import logging
import click
import jwt
import requests
import urllib.parse

from gen3.auth import Gen3Auth
from gen3.file import Gen3File
from gen3.index import Gen3Index

from gen3.submission import Gen3Submission

from cdislogging import get_logger as get_gen3_logger

log_fmt = "%(asctime)s %(name)s %(levelname)s : %(message)s"

# set logging to warning, since gen3.submission logs a verbose INFO message on each call :-()
logging.basicConfig(level=logging.WARNING, format=log_fmt)
# set gen3's logger as well
get_gen3_logger('__name__', log_level='warn', format=log_fmt)


def get_logger_(name):
    """Return logger with level set to info"""
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    return logger


def extract_endpoint(gen3_credentials_file):
    """Get base url of jwt issuer claim."""
    with open(gen3_credentials_file) as input_stream:
        api_key = json.load(input_stream)['api_key']
        claims = jwt.decode(api_key, options={"verify_signature": False})
        assert 'iss' in claims
        return claims['iss'].replace('/user', '')


@click.group()
@click.option('--gen3_credentials_file', default='credentials.json', show_default=True,
              help='API credentials file downloaded from gen3 profile.')
@click.pass_context
def cli(ctx, gen3_credentials_file):
    """File uploader."""

    endpoint = extract_endpoint(gen3_credentials_file)
    get_logger_("cli").info(endpoint)
    get_logger_("cli").debug(f"Read {gen3_credentials_file} endpoint {endpoint}")
    auth = Gen3Auth(endpoint, refresh_file=gen3_credentials_file)
    ctx.ensure_object(dict)
    ctx.obj['submission_client'] = Gen3Submission(endpoint, auth)
    ctx.obj['file_client'] = Gen3File(endpoint, auth)
    ctx.obj['index_client'] = Gen3Index(endpoint, auth)

    ctx.obj['endpoint'] = endpoint
    ctx.obj['programs'] = [link.split('/')[-1] for link in ctx.obj['submission_client'].get_programs()['links']]


def md5(file_name):
    """Calculate the hash and size"""
    import hashlib

    md5_hash = hashlib.md5()

    with open(file_name, "rb") as f:
        # Read and update hash in chunks of 4K
        for byte_block in iter(lambda: f.read(4096), b""):
            md5_hash.update(byte_block)

    return md5_hash.hexdigest(), os.lstat(file_name).st_size


@cli.command()
@click.option('--file_name', default=None, show_default=True,
              help='File name to upload')
@click.pass_context
def upload(ctx, file_name):
    """Upload file_name."""

    file_client = ctx.obj['file_client']
    document = file_client.upload_file(file_name)
    assert 'guid' in document, document
    assert 'url' in document, document
    signed_url = urllib.parse.unquote(document['url'])
    guid = document['guid']
    files = {'file': open(file_name, 'rb')}
    r = requests.put(signed_url, files=files)
    assert r.status_code == 200, (signed_url, r.text)
    print(f'OK: upload {file_name}')
    index_client = ctx.obj['index_client']
    md5_, size_ = md5(file_name)
    record = index_client.get_record(guid)
    assert 'rev' in record, record
    rev = record['rev']
    r = index_client.update_blank(guid, rev, hashes={'md5': md5_}, size=size_)
    assert r['size'] == size_, ("Unexpected size", r)
    print(f'OK: update hash and size {(md5_, size_)}')


@cli.command()
@click.option('--file_name', default=None, show_default=True,
              help='File name to upload')
@click.pass_context
def download(ctx, file_name):
    """Download file_name."""

    file_client = ctx.obj['file_client']
    document = file_client.upload_file(file_name)
    assert 'guid' in document, document
    assert 'url' in document, document
    signed_url = urllib.parse.unquote(document['url'])
    files = {'file': open(file_name, 'rb')}
    r = requests.put(signed_url, files=files)
    assert r.status_code == 200, (signed_url, r.text)
    print('OK')


if __name__ == '__main__':
    cli()
