# generated by datamodel-codegen:
#   filename:  event.json
#   timestamp: 2022-09-10T13:03:37+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field, Extra
from typing import Optional


class UserIdentity(BaseModel):
    principalId: str


class RequestParameters(BaseModel):
    principalId: str
    region: str
    sourceIPAddress: str


class ResponseElements(BaseModel):
    content_length: str = Field(..., alias='content-length')
    x_amz_request_id: str = Field(..., alias='x-amz-request-id')
    x_minio_deployment_id: str = Field(..., alias='x-minio-deployment-id')
    x_minio_origin_endpoint: str = Field(..., alias='x-minio-origin-endpoint')


class OwnerIdentity(BaseModel):
    principalId: str


class Bucket(BaseModel):
    name: str
    ownerIdentity: OwnerIdentity
    arn: str


class UserMetadata(BaseModel, extra=Extra.allow):
    content_type: str = Field(..., alias='content-type')
    # our extensions, set by etl/file::upload
    datanode_type: Optional[str] = Field(..., alias='X-Amz-Meta-Datanode_type')
    datanode_submitter_id: Optional[str] = Field(..., alias='X-Amz-Meta-Datanode_submitter_id')
    datanode_object_id: Optional[str] = Field(..., alias='X-Amz-Meta-Datanode_object_id')
    md5: Optional[str] = Field(..., alias='X-Amz-Meta-Md5')


class Object(BaseModel):
    key: str
    size: int
    eTag: str
    contentType: str
    userMetadata: UserMetadata
    sequencer: str


class S3(BaseModel):
    s3SchemaVersion: str
    configurationId: str
    bucket: Bucket
    object: Object


class Source(BaseModel):
    host: str
    port: str
    userAgent: str


class Record(BaseModel):
    eventVersion: str
    eventSource: str
    awsRegion: str
    eventTime: str
    eventName: str
    userIdentity: UserIdentity
    requestParameters: RequestParameters
    responseElements: ResponseElements
    s3: S3
    source: Source


class Model(BaseModel):
    EventName: str
    Key: str
    Records: List[Record]
